pipeline {
  agent {
    label "swarm"
  }
  environment {
    NGINX_GOST_GIT_URL='https://git.sdsys.ru/iru/nginx-gost.git'
    JENKINS_SSH_KEY='/run/secrets/provision-ssh-key'
    DOCKER_IMAGE='nginx-gost'
    SERVICE_NAME='nginx-gost'
    SERVICE_IMAGE='container_run'
    DOCKER_REGISTRY='dev-registry.infoclinica.ru:5000'
    CLUSTER_NAME='dev-iru-swarm.infoclinica.lan'
    JENKINS_MAIL='jenkins.dev@sdsys.ru'
    SWARM_GIT_NAME='stack-deploy'
    SWARM_GIT_URL='ssh://git@git.sdsys.ru:8022/iru/stack-deploy.git'
    PARAMS_FOR_CONTAINER='--privileged --security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro -d -e "ADMIN_LAB=dev-admin-lab.infoclinica.lan" -e "ADMIN_WEB=dev-admin-web.infoclinica.lan" -e "NODE_LAB=node-lab.infoclinica.lan" -e "NODE_WEB=node-web.infoclinica.lan" ${docker_registry}/${docker_image}:${BUILD_NUMBER}'

  }
  parameters {
    string(
      name: "mailto",
      defaultValue: "tomishinets.v@sdsys.ru",
      description: "Email which has to be notified."
    )
  }
  stages {
    stage("Build") {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'provision', keyFileVariable: 'GIT_SSH_KEY', passphraseVariable: '', usernameVariable: 'GIT_SSH_USERNAME')]) {
          sh '''ansible-playbook -e target_dir=${WORKSPACE} -e ssh_key=${GIT_SSH_KEY} ${WORKSPACE}/ansible/generate.configs.yml
                if [ $? -eq 1 ]; then echo "Can not play ansible playbook"; exit 1; fi
                docker build --no-cache -t ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER} ${WORKSPACE}/
                if [ $? -eq 1 ]; then echo "Can not build a  ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER}"; exit 1; fi
             '''
        }
      }
    }
    stage("Staging") {
      steps {
        sh '''export container_id=$(docker run --privileged \
              --security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
              --rm -d -e "ADMIN_LAB=dev-admin-lab.infoclinica.lan" -e "ADMIN_WEB=dev-admin-web.infoclinica.lan" \
              -e "NODE_LAB=node-lab.infoclinica.lan" -e "NODE_WEB=node-web.infoclinica.lan" ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER})
              sleep 60
              status=`docker inspect ${container_id} --format='{{.State.Health.Status}}'`
              if [ $status != "healthy" ]
              then
                 echo ${container_id} not healthy
                 docker logs ${container_id}
                 docker stop ${container_id}
                 exit 1
              else
                 echo ${container_id} is healthy
                 docker stop ${container_id}
              fi
           '''			  
        
      }
    }
    stage("Publish") {
      steps {
        sh '''echo "Push ${docker_image}"
              docker push ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER}
           '''
      }
    }
    stage("Prod-like") {
      steps {
        echo "Check Prod-like cluster status"
        sh '''ping -c 2 ${CLUSTER_NAME}
              if [ $? -eq 0 ]; then
                export DOCKER_CERT_PATH=/run/secrets/swarm
                export DOCKER_HOST=tcp://${CLUSTER_NAME}:2376 DOCKER_TLS_VERIFY=1
                docker node ls --format "{{.Hostname}} {{.TLSStatus}}" | while read host status
                do
                  if [ $status != Ready ]; then echo "Cluster ${CLUSTER_NAME} state is inconsistent"; exit 1
                  else echo "HOST: $host STATUS: $status"
                  fi
                done
              else echo "Host not Found"; exit 1
              fi
           '''
        echo "Run containers in Prod-like"
        sh '''export DOCKER_CERT_PATH=/run/secrets/swarm
              export DOCKER_HOST=tcp://${CLUSTER_NAME}:2376 DOCKER_TLS_VERIFY=1
              if [ !$(docker service ps -q ${DOCKER_IMAGE}) ];then
                docker service create --replicas 2 \
                --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
                --name ${SERVICE_NAME} ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:1 -p 443:443 -p 80:80 \
                --privileged --security-opt seccomp=unconfined \
                --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro --network=proxy \
                -e "ADMIN_LAB=dev-admin-lab.infoclinica.lan" -e "ADMIN_WEB=dev-admin-web.infoclinica.lan" \
                -e "NODE_LAB=node-lab.infoclinica.lan" -e "NODE_WEB=node-web.infoclinica.lan" \
                ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER}
              else
                docker service update \
                --args "-p 443:443 -p 80:80 \
                --privileged --security-opt seccomp=unconfined \
                --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro --network=proxy \
                -e "ADMIN_LAB=dev-admin-lab.infoclinica.lan" -e "ADMIN_WEB=dev-admin-web.infoclinica.lan" \
                -e "NODE_LAB=node-lab.infoclinica.lan" -e "NODE_WEB=node-web.infoclinica.lan" \
                ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER}" \
                ${SERVICE_NAME}
                if [ $? != 0 ]; then docker service rollback ${SERVICE_NAME}; fi
              fi
           '''
      }
    }
    stage("Tagging") {
        steps {
          echo "Tagging ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER} to ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:latest"
          sh '''docker tag ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:${BUILD_NUMBER} \
                ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:latest
                docker push ${DOCKER_REGISTRY}/iru/${DOCKER_IMAGE}:latest
             '''
          echo "Updating tag info in ${SWARM_GIT_NAME} repository"
          withCredentials([sshUserPrivateKey(credentialsId: 'provision', keyFileVariable: 'GIT_SSH_KEY', passphraseVariable: '', usernameVariable: 'GIT_SSH_USERNAME')]) {
            sh '''GIT_SSH_COMMAND='ssh -i ${GIT_SSH_KEY} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
                  git clone ${SWARM_GIT_URL}
                  cd ${SWARM_GIT_NAME}
                  echo -n ${BUILD_NUMBER} > tags/${DOCKER_IMAGE}.version
                  git add -A
                  git config --global user.email "${JENKINS_MAIL}"
                  git config --global user.name "Jenkins"
                  git commit -m 'Version update'
                  GIT_SSH_COMMAND='ssh -i ${GIT_SSH_KEY} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
                  git push origin master
               '''
         }
       }
     }
  }
  post {
    always {
      echo "CleaningUp work directory"
      deleteDir()
    }
    failure {
      mail charset: 'UTF-8',
           subject: "Jenkins build ERROR",
           mimeType: 'text/html',
           to: "${mailto}",
           body: "<b>ATTENTION!!!</b> <b><br> Jenkins job failed.\n\n <b><br>Project Name:</b> ${env.JOB_NAME} <b><br>\nBuild Number:</b> ${env.BUILD_NUMBER} <b><br>\nURL Build:</b> ${RUN_DISPLAY_URL}"
    }
    success {
      mail charset: 'UTF-8',
           subject: "Jenkins build SUSCCESS",
           mimeType: 'text/html',
           to: "${mailto}",
           body: "<b>Congradulations!!!</b> <b><br> Jenkins job succefully finished.\n\n <b><br>Project Name:</b> ${env.JOB_NAME} <b><br>\nBuild Number:</b> ${env.BUILD_NUMBER} <b><br>\nURL Build:</b> ${RUN_DISPLAY_URL}"
    }
  }
}
