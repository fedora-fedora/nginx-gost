def SERIAL
/* def ENAMES = [ 'prod', 'dev' ]
*/
def ENAMES = [ 'dev' ]
def CLUSTERS = ['prod': 'iru-swarm.infoclinica.lan', 'dev': 'dev-iru-swarm.infoclinica.lan']
def REGISTRIES = ['prod': 'registry.infoclinica.ru:5000', 'dev': 'dev-registry.infoclinica.ru:5000']

pipeline {
  agent {
    label "swarm"
  }
  environment {
    NGINX_GOST_GIT_URL='https://git.sdsys.ru/iru/nginx-gost.git'
    DOCKER_IMAGE='iru/nginx-gost'
    DOCKER_CERT_PATH='/run/secrets/swarm'
    JENKINS_MAIL='jenkins.dev@sdsys.ru'
    PKI_GIT_URL='ssh://git@git.sdsys.ru:8022/sdsys/pki.git'
    SWARM_GIT_NAME='stack-deploy'
    SWARM_GIT_URL='ssh://git@git.sdsys.ru:8022/iru/stack-deploy.git'
  }
  parameters {
    string(
      name: "branch",
      defaultValue: "100060",
      description: "Which branch to use."
    )
    string(
      name: "mailto",
      defaultValue: "admin@sdsys.ru",
      description: "Email which has to be notified."
    )
  }
  stages {
    stage ("Discover SERIAL") {
      steps {
        script {
          SERIAL = sh script: "echo -n `date +%y%m%d``printf %03d $BUILD_NUMBER`", returnStdout: true
        }
      }
    }
    stage("Build") {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'provision', keyFileVariable: 'GIT_SSH_KEY', passphraseVariable: '', usernameVariable: 'GIT_SSH_USERNAME')]) {
          sh '''GIT_SSH_COMMAND='ssh -i ${GIT_SSH_KEY} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
                git clone ${PKI_GIT_URL}
             '''
        }
        ansiColor('xterm') {
          ansiblePlaybook(
            playbook: '${WORKSPACE}/ansible/generate.configs.yml',
            extraVars: [
              target_dir: '${WORKSPACE}',
            ],
            colorized: true)
        }
        sh "docker build --no-cache -t ${DOCKER_IMAGE}:${SERIAL} ."
      }
    }
/*    stage("Staging") {
      steps {
        echo "Staging ${DOCKER_IMAGE}:${SERIAL}"
        sh """set -x
              container_id=\$(docker run --privileged --security-opt seccomp=unconfined \
                                  --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro -d \
                                  -e "ADMIN_LAB=dev-admin-lab.infoclinica.lan" -e "ADMIN_WEB=dev-admin-web.infoclinica.lan" \
                                  -e "NODE_LAB=node-lab.infoclinica.lan" -e "NODE_WEB=node-web.infoclinica.lan" ${DOCKER_IMAGE}:${SERIAL})
              sleep 60
              status=`docker inspect \${container_id} --format='{{.State.Health.Status}}'`
              if [ \$status != "healthy" ]
              then
                 echo \${container_id} not healthy
                 docker logs \${container_id}
                 docker stop \${container_id} && docker rm -f \${container_id}
                 exit 1
              else
                 echo \${container_id} is healthy
                 docker stop \${container_id} && docker rm -f \${container_id}
              fi
           """
      }
    }
*/    stage ("Push to registry") {
      steps {
        script {
          ENAMES.each { item ->
             echo "Pushing to: ${item}, CLUSTER ${CLUSTERS.get((item))}"
             sh """docker tag ${DOCKER_IMAGE}:${SERIAL} ${REGISTRIES.get((item))}/${DOCKER_IMAGE}:${SERIAL}
                   docker push ${REGISTRIES.get((item))}/${DOCKER_IMAGE}:${SERIAL}
                """
          }
        }
      }
    }
    stage ("Deploy") {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'provision', keyFileVariable: 'GIT_SSH_KEY', passphraseVariable: '', usernameVariable: 'GIT_SSH_USERNAME')]) {
            sh """GIT_SSH_COMMAND='ssh -i ${GIT_SSH_KEY} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
                  git clone ${SWARM_GIT_URL} && cd ${SWARM_GIT_NAME}
                  git branch --list -a | grep ${branch}
                  if [ \$? == 0 ];then echo "${branch} is allready exist";git checkout ${branch}; else echo "${branch} doeas not exist!!!"; git checkout -b ${branch};fi
                  echo -n ${SERIAL} > ${SWARM_GIT_NAME}/tags/${DOCKER_IMAGE}.version
               """
        }
        script {
          ENAMES.each { item ->
            echo "Updating $item"
            def DHOST = 'tcp://'+sh(script: "DOCKER_HOST=tcp://${CLUSTERS.get((item))}:2376 DOCKER_TLS_VERIFY=1 docker node inspect self -f '{{.Status.Addr}}'", returnStdout: true).trim()+':2376'
            try {
              sh """cd ${SWARM_GIT_NAME}
                    DOCKER_HOST=${DHOST} DOCKER_TLS_VERIFY=1 ./proxy.sh
                 """
            }
            catch (err) {
              echo "Recoverig $item"
              sh "DOCKER_HOST=${DHOST} DOCKER_TLS_VERIFY=1 docker service rollback ${SERVICE_NAME}"
              currentBuild.result = 'FAILURE'
              error ("Failure on update $item")
            }
          }
        }
      }
    }
    stage("Tagging") {
        steps {
          script {
            ENAMES.each { item ->
              echo "Setting latest tag for $item"
              sh """docker tag ${DOCKER_IMAGE}:${SERIAL} ${REGISTRIES.get((item))}/${DOCKER_IMAGE}:latest
                    docker push ${REGISTRIES.get((item))}/${DOCKER_IMAGE}:latest
                 """
            }
          }
         
          echo "Updating tag info in ${SWARM_GIT_NAME} repository"
          withCredentials([sshUserPrivateKey(credentialsId: 'provision', keyFileVariable: 'GIT_SSH_KEY', passphraseVariable: '', usernameVariable: 'GIT_SSH_USERNAME')]) {
            sh '''cd ${SWARM_GIT_NAME}
                  git add -A
                  git config --global user.email "${JENKINS_MAIL}"
                  git config --global user.name "Jenkins"
                  git commit -m 'Version update'
                  GIT_SSH_COMMAND='ssh -i ${GIT_SSH_KEY} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
                  git push origin ${branch}
               '''
         }
       }
     }
  }
  post {
    always {
      echo "CleaningUp work directory"
      deleteDir()
/*      sh "docker image rm -f `docker image ls -q ${DOCKER_IMAGE}:${SERIAL}`"
*/
    }
    failure {
      mail charset: 'UTF-8',
           subject: "Jenkins build ERROR",
           mimeType: 'text/html',
           to: "${mailto}",
           body: "<b>ATTENTION!!!</b> <b><br> Jenkins job failed.\n\n <b><br>Project Name:</b> ${env.JOB_NAME} <b><br>\nBuild Number:</b> ${env.BUILD_NUMBER} <b><br>\nURL Build:</b> ${RUN_DISPLAY_URL}"
    }
    success {
      mail charset: 'UTF-8',
           subject: "Jenkins build SUSCCESS",
           mimeType: 'text/html',
           to: "${mailto}",
           body: "<b>Congradulations!!!</b> <b><br> Jenkins job succefully finished.\n\n <b><br>Project Name:</b> ${env.JOB_NAME} <b><br>\nBuild Number:</b> ${env.BUILD_NUMBER} <b><br>\nURL Build:</b> ${RUN_DISPLAY_URL}"
    }
  }
}
